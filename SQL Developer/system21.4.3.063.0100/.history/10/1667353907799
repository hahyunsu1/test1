--# IN OUT PARAMETER
--프로시저가 읽고 쓰는 작업을 동시에 할 수 있는 파라미터
create or replace procedure inout_test(
    a1 in number,
    a2 in varchar2,
    a3 in out varchar2,
    a4 out varchar2
)
is
    msg varchar2(30) := '';
begin
     dbms_output.put_line('---------------');
     dbms_output.put_line('프로시저 시작 전');
     dbms_output.put_line('---------------');
     dbms_output.put_line('A1: '||a1);
     dbms_output.put_line('A2: '||a2);
     dbms_output.put_line('A3: '||a3);
     dbms_output.put_line('A4: '||a4);
     a3 := '프로시저 외부에서 이 값을 받을 수 있을까요?';
    msg := 'SUCCESS';
     a4 := msg;
     dbms_output.put_line('---------------');
     dbms_output.put_line('프로시저 시작 후');
     dbms_output.put_line('---------------');
     dbms_output.put_line('A1: '||a1);
     dbms_output.put_line('A2: '||a2);
     dbms_output.put_line('A3: '||a3);
     dbms_output.put_line('A4: '||a4);
 end;
 /
 variable c varchar2(100);
  variable d varchar2(100);
  exec inout_test(5000,'안녕',:c, :d);
  print d
  print c
--사번을 인파라미터로 전달하면 사원의 부서번호에 따라 소속된 부서명을
--문자열로 출력하는 프로시저
--10 회계부서
--20 연구부서
--30 영업부서
--40 운영부서
create or replace procedure dept_find(pno in emp.empno%type)
is
vdno emp.deptno%type;
vename emp.ename%type;
vdname varchar2(20);
begin
    select ename,deptno into vename,vdno
    from emp
    where empno = pno;
    if VDNO=10 then VDNAME :='회계부서';
    elsif VDNO=20 then VDNAME :='연구부서';
    elsif VDNO=30 then VDNAME :='영업부서';
    elsif VDNO=40 then VDNAME :='운영부서';
    else VDNAME:='아직 부서 배정 못받음';
    end if;
    dbms_output.put_line(VENAME||'님은 '||VDNO||'번 '||VDNAME||'에 있습니다');
end;
/
set serveroutput on
exec dept_find(7499);
--
--사원명을 인파라미터로 전달하면
--해당 사원의 연봉을 계산해서 출력하는 프로시저를 작성하되,
--연봉은 COMM이 NULL인 경우와 NULL아 아닌경우를 나눠서 계산하세요
--출력문
--사원명  월급여  보너스 연봉 
--출력하세요

create or replace procedure emp_sal(pname in emp.ename%type)
is
vsal emp.sal%type;
vcomm emp.comm%type;
total number(8);
begin
    select sal,comm into vsal,vcomm
    from emp
    where ename = upper(pname);
    if vcomm is null then total := vsal*12;
    else total := vsal*12+vcomm;
    end if;
    dbms_output.put_line(pname||'-------');
    dbms_output.put_line('월급여: '||vsal);
    dbms_output.put_line('보너스: '||vcomm);
    dbms_output.put_line('연 봉: '||total);
    exception
    when no_data_found then
    dbms_output.put_line(pname||'님은 없습니다.');
    when too_many_rows then
     dbms_output.put_line(pname||'님 데이터가 2건 이상입니다.');
end;
/
exec emp_sal('martin');
exec emp_sal('king');
exec emp_sal('dfd');
exec emp_sal('tom');
insert into emp(empno,ename,sal,comm)
values(8002,'TOM',2000,3000);
commit;

--# FOR LOOP문
declare
vsum number(4) :=0;
begin
    --1부터 10까지의 합
    for i in reverse 1 .. 10 loop
    dbms_output.put_line(i);
    vsum:=vsum+i;
    end loop;
    dbms_output.put_line('까지의 합:'||vsum);
end;
/
--JOB을 인파라미터로 전달하면 해당 업무를 수행하는 사원들의 정보
--사번, 사원명, 부서번호, 부서명, 업무를 출력하세요
--FOR LOOP를 이용해서 풀되 서브쿼리를 이용하세요
select *from emp;
select *from dept;
create or replace procedure emp_job(pjob in emp.job%type)
is

begin
for e in(select empno,ename,deptno,job,(
        select dname from dept where deptno = emp.deptno) dname
        from emp
        where job=pjob) loop
        dbms_output.put_line(e.empno||lpad(e.ename,10,' ')||lpad(e.deptno,8,' ')
                            ||lpad(e.job,12,' ')||lpad(e.dname,16,' '));
        end loop;
end;
/
exec emp_job('ANALYST');


--1~100까지의 숫자 중 짝수만 출력하기
-- exit when 조건;
-- coninue when 조건;

declare
vsum number(4) :=0;
begin
    --1부터 100까지의 합
    for k in  1 .. 100 loop
    continue when mod(k,2)=1;
    dbms_output.put_line(k);
    end loop;    
end;
/
--#LOOP 문
--LOOP
-- 실행문장;
--EXIT [WHEN 조건문]
--end loop;

--EMP테이블에 사원정보를 등록하되 LOOP문 이용해서 등록해봅시다.
--'NONAME1'

declare
vcnt number(3) := 100;
begin
    loop
        insert into emp(empno,ename,hiredate)
        values(vcnt+8000,'noname'||vcnt,sysdate);
    vcnt := vcnt+1;
    exit when vcnt > 105;
    dbms_output.put_line(vcnt-100||'건의 데이터 입력 완료');
    end loop;
end;
/
